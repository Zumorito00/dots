global !p
texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS',
'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS',
'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC',
'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES',
'AmsFS', 'AmsGS' ]]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
			i for i in reversed(synstackids)
			if i in texIgnoreMathZoneIds or i in texMathZoneIds
		)
		return first != ignore
	except StopIteration:
		return False
endglobal

snippet inkfig "Inkscape figures preamble"
\usepackage{import}
\usepackage{pdfpages}
\usepackage{transparent}
\usepackage{xcolor}

\newcommand{\incfig}[2][1]{%
	\def\svgwidth{#1\columnwidth}
	\import{./figures/}{#2.pdf_tex}
}

\pdfsuppresswarningpagegroup=1
endsnippet

snippet .., "{}" iA
{
	$0
}
endsnippet

snippet " "Quote Skeleton" iA
\`\`$1''$0
endsnippet

context "snip.visual_mode"
snippet " "Quote Skeleton Visual" A
\`\`${VISUAL}''
endsnippet

snippet bf "Bold Skeleton" w
\textbf{$1}$0
endsnippet

snippet it "Italic Skeleton" w
\textit{$1}$0
endsnippet

snippet doc "Document Skeleton" b
\documentclass{${1:basic}}
${2:Optional Packages}
\begin{document}
$0
\end{document}
endsnippet

snippet up "Use Package Skeleton" b
\usepackage$1{$2}$0
endsnippet

snippet beg "Begin-End Skeleton" bA
\begin{${1:Environment}}
	$0
\end{$1}
endsnippet

context "snip.visual_mode"
snippet beg "Begin-End Skeleton Visual" A
\begin{$1}$0
	${VISUAL}
\end{$1}
endsnippet

context "snip.visual_mode"
snippet hl "Highlight Skeleton Visual" A
\hl{${VISUAL}
endsnippet

snippet float "FloatBarrier" bA
\FloatBarrier
endsnippet

snippet sec "Section Skeleton" bA
\section{$1}$0
endsnippet

snippet sub "Subsection Skeleton" bA
\subsection{$1}$0
endsnippet

snippet ssub "Subsubsection Skeleton" bA
\subsubsection{$1}$0
endsnippet

snippet para "Paragraph Skeleton" bA
\paragraph{$1}$0
endsnippet

snippet mm "Inline" wA
$$1$$0
endsnippet

snippet dm "Display" wA
\[
$1
\]$0
endsnippet

snippet -> "Right Arrow" iA
$\rightarrow$
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet sr "sqrt" iA
\sqrt{$1}$0
endsnippet

context "math()"
snippet sq "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet
